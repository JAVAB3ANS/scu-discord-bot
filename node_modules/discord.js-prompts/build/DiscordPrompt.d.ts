/// <reference types="node" />
import { Prompt, PromptCollector, Rejection } from "prompt-anything";
import { EventEmitter } from 'events';
import { DiscordChannel } from "./DiscordChannel";
import { MessageVisual } from "./visuals/MessageVisual";
import { MenuEmbed } from './MenuEmbed';
import { Message } from 'discord.js';
export declare type BaseData = {
    __authorID: string;
};
export declare class DiscordPrompt<DataType> extends Prompt<DataType, Message> {
    duration: number;
    static getInactivityVisual<DataType>(channel?: DiscordChannel, data?: DataType): Promise<MessageVisual>;
    static getExitVisual<DataType>(message?: Message, channel?: DiscordChannel, data?: DataType): Promise<MessageVisual>;
    static getRejectVisual<DataType>(error: Rejection, message?: Message, channel?: DiscordChannel, data?: DataType): Promise<MessageVisual>;
    static createMenuRejection<DataType>(message?: Message, data?: DataType, menu?: MenuEmbed): Rejection;
    onReject(error: Rejection, message: Message, channel: DiscordChannel, data: DataType): Promise<void>;
    onInactivity(channel: DiscordChannel, data: DataType): Promise<void>;
    onExit(message: Message, channel: DiscordChannel, data: DataType): Promise<void>;
    createEmitter(): EventEmitter;
    createCollector(channel: DiscordChannel, data: DataType & BaseData): PromptCollector<DataType, Message>;
    handleMessage(message: Message, data: DataType, emitter: PromptCollector<DataType, Message>): Promise<void>;
    handleMenuMessage(message: Message, data: DataType, menu: MenuEmbed, emitter: PromptCollector<DataType, Message>): void;
}
